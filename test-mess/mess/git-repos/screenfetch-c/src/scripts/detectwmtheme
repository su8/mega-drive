#!/usr/bin/env bash
#  detectwmtheme
#  detect and output the name of the theme used in the Window Manager, if present
#  only meant to be run on Linux/*BSD
#  DEPENDS UPON: detectwm for the name of the WM
#  Original Author: Brett Bohnenkamper (KittyKatt) in screenfetch-dev
#  Modified to stand alone by William Woodruff (woodruffw) in screenfetch-c

Win_theme="Unknown"
WM=$1
case $WM in
	'Awesome') if [ -f ${XDG_CONFIG_HOME:-${HOME}/.config}/awesome/rc.lua ]; then Win_theme="$(grep -e '^[^-].*\(theme\|beautiful\).*lua' ${XDG_CONFIG_HOME:-${HOME}/.config}/awesome/rc.lua | grep '[a-zA-Z0-9]\+/[a-zA-Z0-9]\+.lua' -o | cut -d'/' -f1 | head -n1)"; fi;;
	'BlackBox') if [ -f $HOME/.blackboxrc ]; then Win_theme="$(awk -F"/" '/styleFile/ {print $NF}' $HOME/.blackboxrc)"; fi;;
	'Beryl') Win_theme="Unknown";;
	'Cinnamon') Win_theme="$(gsettings get org.cinnamon.theme name)";;
	'Compiz'|'Mutter'*|'GNOME Shell')
		if type -p gsettings >/dev/null 2>&1; then
			Win_theme="$(gsettings get org.gnome.desktop.wm.preferences theme)"
			Win_theme=${Win_theme//"'"}
		elif type -p gconftool-2 >/dev/null 2>&1; then
			Win_theme=$(gconftool-2 -g /apps/metacity/general/theme)
		fi
	;;
	'dminiwm') Win_theme="Unknown";;
	'DWM') Win_theme="Unknown";;
	'E16') Win_theme="$(awk -F"= " '/theme.name/ {print $2}' $HOME/.e16/e_config--0.0.cfg)";;
	'E17'|'Enlightenment') 
		if [ "$(which eet 2>/dev/null)" ]; then
			econfig="$(eet -d $HOME/.e/e/config/standard/e.cfg config | awk '/value \"file\" string.*.edj/{ print $4 }')"
			econfigend="${econfig##*/}"
			Win_theme=${econfigend%.*}
		fi
	;;
	#E17 doesn't store cfg files in text format so for now get the profile as opposed to theme. atyoung
	#TODO: Find a way to extract and read E17 .cfg files ( google seems to have nothing ). atyoung
	'E17') Win_theme=${E_CONF_PROFILE};;
	'Emerald') if [ -f $HOME/.emerald/theme/theme.ini ]; then Win_theme="$(for a in /usr/share/emerald/themes/* $HOME/.emerald/themes/*; do cmp "$HOME/.emerald/theme/theme.ini" "$a/theme.ini" &>/dev/null && basename "$a"; done)"; fi;;
	'Finder') Win_theme="Unknown";;
	'FluxBox'|'Fluxbox') if [ -f $HOME/.fluxbox/init ]; then Win_theme="$(awk -F"/" '/styleFile/ {print $NF}' $HOME/.fluxbox/init)"; fi;;
	'FVWM') Win_theme="Unknown";;
	'i3') Win_theme="Unknown";;
	'IceWM') if [ -f $HOME/.icewm/theme ]; then Win_theme="$(awk -F"[\",/]" '!/#/ {print $2}' $HOME/.icewm/theme)"; fi;;
	'KWin'*)
		if [[ -z $KDE_CONFIG_DIR ]]; then
			if type -p kde5-config >/dev/null 2>&1; then
				KDE_CONFIG_DIR=$(kde5-config --localprefix)
			elif type -p kde4-config >/dev/null 2>&1; then
				KDE_CONFIG_DIR=$(kde4-config --localprefix)
			elif type -p kde-config >/dev/null 2>&1; then
				KDE_CONFIG_DIR=$(kde-config --localprefix)
			fi
		fi
		if [[ -n $KDE_CONFIG_DIR ]]; then
			Win_theme=$(awk '/PluginLib=kwin3_/{gsub(/PluginLib=kwin3_/,"",$0); print $0; exit}' $KDE_CONFIG_DIR/share/config/kwinrc)
			if [[ -z $Win_theme ]]; then
				if [[ -f $KDE_CONFIG_DIR/share/config/kdebugrc ]]; then
					Win_theme=$(awk '/(decoration)/ {gsub(/\[/,"",$1); print $1; exit}' $KDE_CONFIG_DIR/share/config/kdebugrc)
					if [[ -z $Win_theme ]]; then
						Win_theme="Not Found"
					fi
				else
					Win_theme="Not Found"
				fi
			fi
			if [[ $Win_theme != 'Not Found' ]]; then
				if [[ ${BASH_VERSINFO[0]} -ge 4 ]]; then
					if [[ ${BASH_VERSINFO[0]} -eq 4 && ${BASH_VERSINFO[1]} -gt 1 ]] || [[ ${BASH_VERSINFO[0]} -gt 4 ]]; then
						Win_theme=${Win_theme^}
					else
						Win_theme="$(tr '[:lower:]' '[:upper:]' <<< ${Win_theme:0:1})${Win_theme:1}"
					fi
				else
					Win_theme="$(tr '[:lower:]' '[:upper:]' <<< ${Win_theme:0:1})${Win_theme:1}"
				fi
			fi
		fi
	;;
	'Marco')
		Win_theme="$(gsettings get org.mate.Marco.general theme)"
		Win_theme=${Win_theme//"'"}
	;;
	'Metacity') if [ "`gconftool-2 -g /apps/metacity/general/theme`" ]; then Win_theme="$(gconftool-2 -g /apps/metacity/general/theme)"; fi ;;
	'monsterwm') Win_theme="Unknown";;
	'Musca') Win_theme="Unknown";;
	'OpenBox'|'Openbox')
		if [ -f ${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/rc.xml ]; then
			Win_theme="$(awk -F"[<,>]" '/<theme/ { getline; print $3 }' ${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/rc.xml)";
		elif [[ -f ${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/lxde-rc.xml && $DE == "LXDE" ]]; then
			Win_theme="$(awk -F"[<,>]" '/<theme/ { getline; print $3 }' ${XDG_CONFIG_HOME:-${HOME}/.config}/openbox/lxde-rc.xml)";
		fi
	;;
	'PekWM') if [ -f $HOME/.pekwm/config ]; then Win_theme="$(awk -F"/" '/Theme/ {gsub(/\"/,""); print $NF}' $HOME/.pekwm/config)"; fi;;
	'Ratpoison') Win_theme="Unknown";;
	'Sawfish') Win_theme="$(awk -F")" '/\(quote default-frame-style/{print $2}' $HOME/.sawfish/custom | sed 's/ (quote //')";;
	'ScrotWM') Win_theme="Unknown";;
	'SpectrWM') Win_theme="Unknown";;
	'subtle') Win_theme="Unknown";;
	'WindowMaker') Win_theme="Unknown";;
	'WMFS') Win_theme="Unknown";;
	'wmii') Win_theme="Unknown";;
	'Xfwm4') if [ -f ${XDG_CONFIG_HOME:-${HOME}/.config}/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml ]; then Win_theme="$(xfconf-query -c xfwm4 -p /general/theme)"; fi;;
	'XMonad') Win_theme="Unknown";;
esac

printf $Win_theme